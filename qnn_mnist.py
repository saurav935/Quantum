# -*- coding: utf-8 -*-
"""qnn_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pNi06nBcd8oYzJ-LbHToqhrZM0HdJsMi

**Installing the necessary packages**
"""

!pip install --quiet tensorflow==2.7.0

!pip install tensorflow-quantum==0.7.2

"""**Importing the necessary packages**"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import tensorflow_quantum as tfq

import cirq
import sympy
import numpy as np
import seaborn as sns
import collections

# visualization tools
# %matplotlib inline
import matplotlib.pyplot as plt
from cirq.contrib.svg import SVGCircuit

"""# **Data preprocessing**"""

# Loading the data
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalizing the data
x_train, x_test = x_train[..., np.newaxis]/255.0, x_test[..., np.newaxis]/255.0

"""**Function to keep only digit 3 and digit 6**"""

def keep_only_3_and_6(a, b):
    keep = (b == 3) | (b == 6)
    a, b = a[keep], b[keep]
    b = b == 3
    return a,b

x_train, y_train = keep_only_3_and_6(x_train, y_train)
x_test, y_test = keep_only_3_and_6(x_test, y_test)

"""**Seeing an example**"""

plt.imshow(x_train[0, :, :, 0])

"""**Function to resize**"""

def resize_to_4_x_4(dataset, size):
  return tf.image.resize(dataset, size).numpy()

x_train_resized = resize_to_4_x_4(x_train, (4,4))
x_test_resized = resize_to_4_x_4(x_test, (4,4))

print(y_train[0])

plt.imshow(x_train_resized[0,:,:,0], vmin=0, vmax=1)

"""**Remove conradictory examples**"""

def remove_contradicting_images(xs, ys):

    # In the end "mapping" will hold the number of unique images
    mapping = collections.defaultdict(set)
    orig_x = {}

    # Establish the labels for each individual image.:
    for x,y in zip(xs,ys):
      orig_x[tuple(x.flatten())] = x
      mapping[tuple(x.flatten())].add(y)

    new_x = []
    new_y = []

    for flatten_x in mapping:
      x = orig_x[flatten_x]
      labels = mapping[flatten_x]
      if len(labels) == 1:
          new_x.append(x)
          new_y.append(next(iter(labels)))
      else:
          # Images that match multiple labels are discarded
          pass

    # Number of unique images of digit 3
    unique_images_3 = sum(1 for value in mapping.values() if len(value) == 1 and True in value)

    # Number of unique images of digit 6
    unique_images_6 = sum(1 for value in mapping.values() if len(value) == 1 and False in value)
    return np.array(new_x), np.array(new_y)

x_train_no_contradicting, y_train_no_contradicting = remove_contradicting_images(x_train_resized, y_train)

"""# **Converting images to quantum circuits**

**Applying threshold**
"""

# As this is a binary classifier, thereshold is 0.5
threshold = 0.5

x_train_binary = np.array(x_train_no_contradicting > threshold, dtype=np.float32)
x_test_binary = np.array(x_test_resized > threshold, dtype=np.float32)

def convert_image_to_circuit(image):
    """Encode truncated classical image into quantum datapoint."""
    image_values = np.ndarray.flatten(image)
    qubits = cirq.GridQubit.rect(4, 4)
    quantum_circuit = cirq.Circuit()
    for i, value in enumerate(image_values):
        if value:
            quantum_circuit.append(cirq.X(qubits[i]))
    return quantum_circuit


x_train_circuit = [convert_image_to_circuit(x) for x in x_train_binary]
x_test_circuit = [convert_image_to_circuit(x) for x in x_test_binary]

"""**Training data's quantum circuit**"""

print("Training data:")
SVGCircuit(x_train_circuit[1])

"""**Testing data's quantum circuit**"""

print("Test data:")
SVGCircuit(x_test_circuit[1])

"""**Convert to tensors**"""

x_train_tensors = tfq.convert_to_tensor(x_train_circuit)
x_test_tensors = tfq.convert_to_tensor(x_test_circuit)

"""# **Quantum Neural Network Model**"""

class CircuitLayerBuilder():
    def __init__(self, data_qubits, readout_qubit):
        self.data_qubits = data_qubits
        self.readout_qubit = readout_qubit

    def add_layer(self, circuit, gate, prefix):
        for i, qubit in enumerate(self.data_qubits):
            symbol = sympy.Symbol(prefix + '-' + str(i))
            circuit.append(gate(qubit, self.readout_qubit)**symbol)

"""**Create a sample circuit**"""

sample_circuit = CircuitLayerBuilder(data_qubits = cirq.GridQubit.rect(2,2),
                                   readout_qubit=cirq.GridQubit(-2,-1))

quantum_circuit = cirq.Circuit()
sample_circuit.add_layer(quantum_circuit, gate = cirq.XX, prefix='xx')
SVGCircuit(quantum_circuit)

"""**Create circuit for QNN**"""

def create_quantum_model():
    """This function creates a QNN model circuit and the necessary operations."""
    data_qubits = cirq.GridQubit.rect(4, 4)        # a 4x4 grid.
    readout_qubit = cirq.GridQubit(-1, -1)         # a single qubit at [-1,-1]
    quantum_circuit = cirq.Circuit()

    # Preparing the readout qubit.
    quantum_circuit.append(cirq.X(readout_qubit))
    quantum_circuit.append(cirq.H(readout_qubit))

    builder = CircuitLayerBuilder(
        data_qubits = data_qubits,
        readout_qubit=readout_qubit)

    # Adding layers
    builder.add_layer(quantum_circuit, cirq.XX, "xx1")
    builder.add_layer(quantum_circuit, cirq.ZZ, "zz1")

    # Finally, prepare the readout qubit.
    quantum_circuit.append(cirq.H(readout_qubit))

    return quantum_circuit, cirq.Z(readout_qubit)

model_circuit, model_readout = create_quantum_model()

SVGCircuit(model_circuit)

"""**Build the Keras model**"""

model = tf.keras.Sequential([
    # The input is the data-circuit, encoded as a tf.string
    tf.keras.layers.Input(shape=(), dtype=tf.string),
    tfq.layers.PQC(model_circuit, model_readout),
])

model.summary()

"""**Converting from True/False to [-1, 1]**"""

y_train_hinge = 2.0*y_train_no_contradicting-1.0
y_test_hinge = 2.0*y_test-1.0

"""**Hinge accuracy**"""

def hinge_accuracy(y_true, y_pred):
    y_true = tf.squeeze(y_true) > 0.0
    y_pred = tf.squeeze(y_pred) > 0.0
    result = tf.cast(y_true == y_pred, tf.float32)

    return tf.reduce_mean(result)

"""**Compiling the model**"""

model.compile(
    loss=tf.keras.losses.Hinge(),
    optimizer=tf.keras.optimizers.Adam(),
    metrics=[hinge_accuracy])

"""# **Training the model**"""

qnn_history = model.fit(
      x_train_tensors_subset, y_train_hinge_subset,
      batch_size=32,
      epochs=10,
      verbose=1,
      validation_data=(x_test_tensors, y_test_hinge))

"""**Evaluating the model**"""

qnn_results = model.evaluate(x_test_tensors, y_test)

print(qnn_results)

"""**Accuracy**"""

accuracy = qnn_results[1] * 100
print("The accuracy of the model is: ", str(accuracy) + ' %')

