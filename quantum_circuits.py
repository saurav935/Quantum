# -*- coding: utf-8 -*-
"""quantum_circuits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PRdG4CwVK6aIPa58E1nsz1eE_mOjtXam

**Installing Cirq**
"""

!pip install cirq

import cirq

"""**Initializing qubits one by one**"""

qubit_0 = cirq.LineQubit(0)           # Qubit number 1
qubit_1 = cirq.LineQubit(1)           # Qubit number 2
qubit_2 = cirq.LineQubit(2)           # Qubit number 3
qubit_3 = cirq.LineQubit(3)           # Qubit number 4
qubit_4 = cirq.LineQubit(4)           # Qubit number 5
qubit_5 = cirq.LineQubit(5)           # Qubit number 6

print(qubit_0)

total_qubits = cirq.LineQubit.range(6)

print(total_qubits)

"""**Creating GridQubits**"""

grid_qubit = cirq.GridQubit(1,2)

print(grid_qubit)

"""**Creating qubits in the form of rectangular grid**"""

rectangular_grid_qubits = cirq.GridQubit.rect(rows=4, cols=3)

print(rectangular_grid_qubits)

"""**Creating qubits in a square grid shape**"""

square_grid_qubits = cirq.GridQubit.square(2)   # 2 is the size of the square

print(square_grid_qubits)

"""**Initialising the last qubit with state 1 and applying Hadamard gates to all qubits**"""

circuit = cirq.Circuit(cirq.X(total_qubits[5]))

circuit.append(cirq.H(total_qubits[0]))

circuit.append(cirq.H(total_qubits[1]))

circuit.append(cirq.H(total_qubits[2]))

circuit.append(cirq.H(total_qubits[3]))

circuit.append(cirq.H(total_qubits[4]))

circuit.append(cirq.H(total_qubits[5]))

print(circuit)

"""**Doing the same step above, but in an efficient manner**"""

# circuit = cirq.Circuit(cirq.X(total_qubits[5]))
# for qubit in total_qubits:
#     circuit.append(cirq.H(qubit))
    
# print(circuit)

"""**Applying the CNOT gates**"""

circuit.append(cirq.CNOT(total_qubits[4], total_qubits[5]))

circuit.append(cirq.CNOT(total_qubits[1], total_qubits[5]))

circuit.append(cirq.CNOT(total_qubits[0], total_qubits[5]))

print(circuit)

"""Applying Hadamard gates"""

for qubit in total_qubits:
    circuit.append(cirq.H(qubit))
    
print(circuit)

"""**Creating the whole circuit from scratch, using moments**"""

# Initializing 6 qubits
total_qubits = cirq.LineQubit.range(6)

# Changing the state of the last qubit from 0 to 1
first_moment = cirq.Moment(cirq.X(total_qubits[5]))

# Applying the Hadamard gates on each qubits
second_moment = cirq.Moment(cirq.H.on_each(total_qubits))

# Creating an empty circuit
circuit = cirq.Circuit()

# Appending first moment to the circuit
circuit.append(first_moment)

# Appending second moment to the circuit
circuit.append(second_moment)

# Appending CNOT gates
circuit.append(cirq.CNOT(total_qubits[4], total_qubits[5]))
circuit.append(cirq.CNOT(total_qubits[1], total_qubits[5]))
circuit.append(cirq.CNOT(total_qubits[0], total_qubits[5]))

# Applying the final Hadamard gates

circuit.append(second_moment)

print(circuit)

"""**Simulating a quantum computer**"""

# Before starting the simulation, we need to insert measurements at # the end of our quantum circuits
measurement_gates = cirq.Moment([cirq.measure(qubit) for qubit in total_qubits])

# Append it to the circuit
circuit.append(measurement_gates)

# Initializing the quantum simulator
quantum_simulator = cirq.Simulator()

# Running the circuit on the simulator
results = quantum_simulator.run(circuit)

print(results)

